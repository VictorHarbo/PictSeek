<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>dk.harbojohnston</groupId>
    <artifactId>PictSeek</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>

    <repositories>
        <repository>
            <id>sbforge-nexus</id>
            <url>https://sbforge.org/nexus/content/groups/public</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>
    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>dk.kb.util</groupId>
            <artifactId>kb-util</artifactId>
            <version>1.5.4</version>
            <exclusions>
                <exclusion>
                    <!-- kb-util has 2.3.3, but transitive resolving has 2.4.0 somewhere-->
                    <groupId>jakarta.xml.bind</groupId>
                    <artifactId>jakarta.xml.bind-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <scope>provided</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/io.swagger/swagger-codegen-maven-plugin -->
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-codegen-maven-plugin</artifactId>
            <version>2.4.41</version>
        </dependency>
        <!-- Dependency for javax.ws.rs.core -->
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>


        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>4.0.2</version>
            <scope>provided</scope>
        </dependency>


        <!-- Apache CXF and servlet stuff -->
        <dependency>
            <groupId>jakarta.ws.rs</groupId>
            <artifactId>jakarta.ws.rs-api</artifactId>
            <version>2.1.6</version>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-transports-http</artifactId>
            <!-- Latest version is 4.0.3. Not tested -->
            <version>3.6.2</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-csv</artifactId>
            <version>1.8</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/javax.xml.ws/jaxws-api -->
        <dependency>
            <groupId>javax.xml.ws</groupId>
            <artifactId>jaxws-api</artifactId>
            <version>2.3.1</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-xml-provider</artifactId>
            <version>2.10.1</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
            <version>2.16.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-client</artifactId>
            <!-- Latest version is 4.0.3. Not tested -->
            <version>3.6.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-service-description</artifactId>
            <!-- Latest version is 4.0.3. Not tested -->
            <version>3.6.2</version>
        </dependency>
        <dependency>
            <!--For the openapi endpoint /openapi.json-->
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-service-description-openapi-v3</artifactId>
            <!-- Latest version is 4.0.3. Not tested -->
            <version>3.6.2</version>
        </dependency>
        <dependency>
            <!--For the swagger UI endpoint /api-docs?url=openapi.json-->
            <groupId>org.webjars</groupId>
            <artifactId>swagger-ui</artifactId>
            <version>5.9.0</version>
        </dependency>

        <!-- openapitools dependency -->
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-jaxrs</artifactId>
            <exclusions>
                <exclusion>
                    <artifactId>jsr311-api</artifactId>
                    <groupId>javax.ws.rs</groupId>
                </exclusion>
                <exclusion>
                    <!-- swagger-jaxrs has 1.1.0.Final, but transitive resolving has 2.0.2 somewhere-->
                    <groupId>javax.validation</groupId>
                    <artifactId>validation-api</artifactId>
                </exclusion>
            </exclusions>
            <version>1.5.23</version>
        </dependency>

        <!-- Logging dependencies -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>2.0.11</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <version>2.0.9</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>log4j-over-slf4j</artifactId>
            <version>2.0.9</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>2.0.9</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.4.14</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-imaging -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-imaging</artifactId>
            <version>1.0.0-alpha5</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.azure/azure-ai-vision-imageanalysis -->
        <!-- Azure AI is used for describing images. -->
        <dependency>
            <groupId>com.azure</groupId>
            <artifactId>azure-ai-vision-imageanalysis</artifactId>
            <version>1.0.0-beta.2</version>
        </dependency>

        <dependency>
            <groupId>com.github.eirslett</groupId>
            <artifactId>frontend-maven-plugin</artifactId>
            <version>1.15.0</version>
        </dependency>


        <!-- Enmbedded solr for unittest -->
        <dependency>
            <groupId>org.apache.solr</groupId>
            <artifactId>solr-solrj</artifactId>
            <version>9.4.0</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12-impl</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.apache.solr</groupId>
            <artifactId>solr-test-framework</artifactId>
            <version>9.4.0</version>
            <scope>test</scope>
            <exclusions>
                <exclusion> <!-- Solves the "multiple slf bindings" warning -->
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-slf4j-impl</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12-impl</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.solr/solr-analysis-extras -->
        <dependency>
            <groupId>org.apache.solr</groupId>
            <artifactId>solr-analysis-extras</artifactId>
            <version>9.4.0</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.10.2</version>
            <scope>test</scope>
        </dependency>


    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>src/main/openapi</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>

            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>10.0.12</version>
                <configuration>
                    <webApp>
                        <contextPath>/${project.artifactId}/</contextPath>
                        <descriptor>${project.basedir}/target/${project.build.finalName}/WEB-INF/web.xml</descriptor>
                        <jettyEnvXml>${project.basedir}/target/jetty-res/jetty-env.xml</jettyEnvXml>
                    </webApp>
                    <httpConnector>
                        <port>9071</port>
                    </httpConnector>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
                <executions>
                    <execution>
                        <!--This ensures that the openapi_*.yaml have been filtered and copied to target/classes
                        BEFORE being used by the openapi generator above-->
                        <phase>generate-sources</phase>
                        <!--as both the openapi codegen and this execution happens at phase generate-sources, ensure
                        this happens first by having this placed above codegen in the pom-->
                        <goals>
                            <goal>resources</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>copy-resources</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/jetty-res</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/test/jetty</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-solr-test-resources</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>testResources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/solr</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/solr</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.openapitools</groupId>
                <artifactId>openapi-generator-maven-plugin</artifactId>
                <version>4.2.2</version>
                <!-- Running this gives
                     [WARNING] The value (generator's option) must be either boolean or string. Default to `false`.
                     which seems to be an unresolved issue: https://github.com/OpenAPITools/openapi-generator/issues/9008 -->
                <configuration>
                    <generatorName>jaxrs-cxf-extended</generatorName>
                    <inputSpec>${project.build.outputDirectory}/openapi.yaml</inputSpec><!-- Will always be overridden -->
                    <modelNameSuffix>Dto</modelNameSuffix>
                    <generateSupportingFiles>false</generateSupportingFiles>
                    <generateApiTests>false</generateApiTests>
                    <generateModelDocumentation>false</generateModelDocumentation>
                    <generateApis>true</generateApis>
                    <output>${project.basedir}</output>
                    <templateDirectory>src/main/templates/</templateDirectory>

                    <configOptions>
                        <!--https://openapi-generator.tech/docs/generators/jaxrs-cxf-extended/-->
                        <!-- https://openapi-generator.tech/docs/generators/java/ -->
                        <sourceFolder>target/generated-sources</sourceFolder>
                        <useSwaggerFeature>true</useSwaggerFeature>
                        <useSwaggerUI>true</useSwaggerUI>
                        <apiPackage>${project.artifactId}.api</apiPackage>
                        <modelPackage>${project.artifactId}.model</modelPackage>
                        <!-- https://openapi-generator.tech/docs/generators/java/ -->
                        <!--<dateLibrary>threetenbp</dateLibrary>-->
                        <!--<dateLibrary>Java11</dateLibrary>-->
                        <implFolder>src/main/java</implFolder>
                        <invokerPackage>${project.artifactId}</invokerPackage>
                    </configOptions>
                    <packageName>${project.artifactId}</packageName>
                </configuration>


                <!-- Version 1 -->
                <!-- When a new version is needed, make a copy of two v1-related executions below, then change
                     v1 to v2 in the copy.
                     Go to plugin.configuration.webResources.resource.includes in this pom.xml and extend the list
                     with v2 versions of the JSON & YAML files.

                     Also remember to:
                     * Create dk.kb.present.webservice.Application_v2
                     * Create src/main/openapi/openapi_v2.yaml
                     * Update src/main/webapp/WEB-INF/web.xml
                     * Update src/main/webapp/api/index.html
                -->

                <executions>
                    <execution>
                        <!-- Generate API and Model-files from the OpenAPI specification (positioned under the target/generated-sources/ folder).
                             These files are overwritten on all builds, so they should never be edited manually. -->
                        <id>v1: generate api classes</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <inputSpec>${project.build.outputDirectory}/openapi_v1.yaml</inputSpec>
                            <ignoreFileOverride>
                                ${project.basedir}/.openapi-codegen-ignore-api
                            </ignoreFileOverride>

                            <configOptions>
                                <apiPackage>${project.artifactId}.api.v1</apiPackage>
                                <modelPackage>${project.artifactId}.model.v1</modelPackage>
                                <!-- Setting this to true overwrites existing implementations.
                                     Only set it temporarily when creating a new project -->
                                <generateOperationBody>false</generateOperationBody>
                                <sourceFolder>target/generated-sources</sourceFolder>
                            </configOptions>
                        </configuration>
                    </execution>
                    <execution>
                        <!-- The purpose it to generate skeleton implementation classes, if such classes are not already existing.
                         Since we always want to overwrite existing api & model-files when the OpenAPI specification is changed,
                         but never want to overwrite existing implementation-files, we need to do the generation in 2 steps. -->
                        <id>v1: generate skeleton impl</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <inputSpec>${project.build.outputDirectory}/openapi_v1.yaml</inputSpec>
                            <ignoreFileOverride>
                                ${project.basedir}/.openapi-codegen-ignore-impl
                            </ignoreFileOverride>

                            <configOptions>
                                <apiPackage>${project.artifactId}.api.v1</apiPackage>
                                <modelPackage>${project.artifactId}.model.v1</modelPackage>
                                <generateOperationBody>true</generateOperationBody>
                            </configOptions>
                            <skipOverwrite>true</skipOverwrite>
                        </configuration>
                    </execution>

                    <!-- Client for the backend -->
                    <execution>
                        <id>Generate client for JAR package and use by other services</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <inputSpec>${project.build.outputDirectory}/openapi_v1.yaml</inputSpec>
                            <ignoreFileOverride>${project.basedir}/.openapi-codegen-ignore-api</ignoreFileOverride>
                            <generatorName>java</generatorName>
                            <library>native</library>

                            <!-- Do not generate doc or tests for this client, we will handle this ourselves-->
                            <generateApis>true</generateApis>
                            <generateApiTests>false</generateApiTests>
                            <generateApiDocumentation>false</generateApiDocumentation>
                            <generateModels>false</generateModels>
                            <generateModelTests>false</generateModelTests>
                            <generateModelDocumentation>false</generateModelDocumentation>

                            <!-- Ensure ONLY the ApiClient and supporting classes are created, not the gradle mess-->
                            <generateSupportingFiles>true</generateSupportingFiles>
                            <supportingFilesToGenerate>ApiClient.java,ApiException.java,Configuration.java,Pair.java</supportingFilesToGenerate>

                            <!-- Do NOT use the customised templates as they are only for the webservice part, not the client-->
                            <!-- Hacked by Asger by setting to an existing folder without templates -->
                            <templateDirectory>src/main/</templateDirectory>

                            <configOptions>
                                <apiPackage>${project.artifactId}.client.v1</apiPackage>
                                <modelPackage>${project.artifactId}.model.v1</modelPackage>
                                <invokerPackage>${project.artifactId}.invoker.v1</invokerPackage>
                                <sourceFolder>target/generated-sources</sourceFolder>
                                <implFolder>target/generated-sources</implFolder>
                            </configOptions>
                        </configuration>
                    </execution>

                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.4.0</version>
                <configuration>
                    <webXml>src/main/webapp/WEB-INF/web.xml</webXml>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                        </manifest>
                    </archive>

                    <!-- Generate a JAR with client classes and openapi-YAML for easy use by other services -->
                    <attachClasses>true</attachClasses>

                    <!--Enable maven filtering for the web.xml-->
                    <filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>
                    <webResources>
                        <resource>
                            <!--Include the openapi spec files so we can serve them-->
                            <directory>${project.build.outputDirectory}</directory>
                            <targetPath>.</targetPath>
                            <includes>
                                <include>openapi_v1.json</include>
                                <include>openapi_v1.yaml</include>
                            </includes>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>

            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>1.15.0</version>
                <configuration>
                    <nodeVersion>v18.12.1</nodeVersion>
                    <npmVersion>8.19.2</npmVersion>
                    <workingDirectory>${basedir}/src/main/frontend</workingDirectory>
                    <installDirectory>target</installDirectory>
                </configuration>
                <executions>
                    <execution>
                        <id>install node and npm</id>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                        <phase>generate-resources</phase>
                    </execution>
                    <execution>
                        <id>npm install</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <arguments>install</arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>npm run-script build</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <arguments>install</arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>